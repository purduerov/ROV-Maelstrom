/* Put all of your #includes and #defines up here   */

#include "thrust_mapper.h"


/*Put all function definitions here. Do not forget the 
  classname:: part before the function name! */

/* Second note, each class must have a constructor. This
   is a function that is called when you create the object 
   (just like creating a variable) of the class. This function
   will have no return type. */


ThrustMapper::ThrustMapper(void)
{
	/*
	 *	Initialize mapper matrices and index here
	 */
	mapper_matrices.currentMapperMatrix = ALL;

	mapper_matrices.matrices[0] = mapper_matrices.all;
	mapper_matrices.matrices[1] = mapper_matrices.minus_t1;
	mapper_matrices.matrices[2] = mapper_matrices.minus_t2;
	mapper_matrices.matrices[3] = mapper_matrices.minus_t3;
	mapper_matrices.matrices[4] = mapper_matrices.minus_t4;
	mapper_matrices.matrices[5] = mapper_matrices.minus_t5;
	mapper_matrices.matrices[6] = mapper_matrices.minus_t6;
	mapper_matrices.matrices[7] = mapper_matrices.minus_t7;
	mapper_matrices.matrices[8] = mapper_matrices.minus_t8;
	mapper_matrices.matrices[9] = mapper_matrices.none;
  mapper_matrices.matrices[10] = mapper_matrices.minus_t58;
  mapper_matrices.matrices[11] = mapper_matrices.minus_t67;

	// Values for mapper_matrices generated by Jason King's generator in matlab.

    /*mapper_matrices.matrices[0].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[0].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[0].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[0].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[0].t5 = vect6Make(  -19,    14,   228,   181,   236,     0);
    mapper_matrices.matrices[0].t6 = vect6Make(  -19,   -14,   228,  -181,   236,     0);
    mapper_matrices.matrices[0].t7 = vect6Make(   19,    14,   284,   181,  -236,     0);
    mapper_matrices.matrices[0].t8 = vect6Make(   19,   -14,   284,  -181,  -236,     0);*/

    // Mapper for only six motors for first pool test, hopefully replaced soon....
	mapper_matrices.matrices[0].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
	mapper_matrices.matrices[0].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
	mapper_matrices.matrices[0].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
	mapper_matrices.matrices[0].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
	mapper_matrices.matrices[0].t5 = vect6Make(    0,     0,     0,     0,     0,     0);
	mapper_matrices.matrices[0].t6 = vect6Make(  -14,   -18,   491,  -228,   175,     0);
	mapper_matrices.matrices[0].t7 = vect6Make(   14,    18,   533,   228,  -174,     0);
	mapper_matrices.matrices[0].t8 = vect6Make(    0,     0,     0,     0,     0,     0);


    
    mapper_matrices.matrices[1].t1 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[1].t2 = vect6Make(    0, -1465,     0,     0,     0,   262);
    mapper_matrices.matrices[1].t3 = vect6Make( -545,    32,     0,     0,     0,   262);
    mapper_matrices.matrices[1].t4 = vect6Make( -545, -1497,     0,     0,     0,     0);
    mapper_matrices.matrices[1].t5 = vect6Make(  -19,    14,   228,   181,   236,     0);
    mapper_matrices.matrices[1].t6 = vect6Make(  -19,   -14,   228,  -181,   236,     0);
    mapper_matrices.matrices[1].t7 = vect6Make(   19,    14,   284,   181,  -236,     0);
    mapper_matrices.matrices[1].t8 = vect6Make(   19,   -14,   284,  -181,  -236,     0);
    
    mapper_matrices.matrices[2].t1 = vect6Make(    0,  1465,     0,     0,     0,  -262);
    mapper_matrices.matrices[2].t2 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[2].t3 = vect6Make( -545,  1497,     0,     0,     0,     0);
    mapper_matrices.matrices[2].t4 = vect6Make( -545,   -32,     0,     0,     0,  -262);
    mapper_matrices.matrices[2].t5 = vect6Make(  -19,    14,   228,   181,   236,     0);
    mapper_matrices.matrices[2].t6 = vect6Make(  -19,   -14,   228,  -181,   236,     0);
    mapper_matrices.matrices[2].t7 = vect6Make(   19,    14,   284,   181,  -236,     0);
    mapper_matrices.matrices[2].t8 = vect6Make(   19,   -14,   284,  -181,  -236,     0);
    
    mapper_matrices.matrices[3].t1 = vect6Make(  545,   -32,     0,     0,     0,  -262);
    mapper_matrices.matrices[3].t2 = vect6Make(  545, -1497,     0,     0,     0,     0);
    mapper_matrices.matrices[3].t3 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[3].t4 = vect6Make(    0, -1529,     0,     0,     0,  -262);
    mapper_matrices.matrices[3].t5 = vect6Make(  -19,    14,   228,   181,   236,     0);
    mapper_matrices.matrices[3].t6 = vect6Make(  -19,   -14,   228,  -181,   236,     0);
    mapper_matrices.matrices[3].t7 = vect6Make(   19,    14,   284,   181,  -236,     0);
    mapper_matrices.matrices[3].t8 = vect6Make(   19,   -14,   284,  -181,  -236,     0);
    
    mapper_matrices.matrices[4].t1 = vect6Make(  545,  1497,     0,     0,     0,     0);
    mapper_matrices.matrices[4].t2 = vect6Make(  545,    32,     0,     0,     0,   262);
    mapper_matrices.matrices[4].t3 = vect6Make(    0,  1529,     0,     0,     0,   262);
    mapper_matrices.matrices[4].t4 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[4].t5 = vect6Make(  -19,    14,   228,   181,   236,     0);
    mapper_matrices.matrices[4].t6 = vect6Make(  -19,   -14,   228,  -181,   236,     0);
    mapper_matrices.matrices[4].t7 = vect6Make(   19,    14,   284,   181,  -236,     0);
    mapper_matrices.matrices[4].t8 = vect6Make(   19,   -14,   284,  -181,  -236,     0);
    
    mapper_matrices.matrices[5].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[5].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[5].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[5].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[5].t5 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[5].t6 = vect6Make(  -37,     0,   456,     0,   473,     0);
    mapper_matrices.matrices[5].t7 = vect6Make(    0,    28,   512,   362,     0,     0);
    mapper_matrices.matrices[5].t8 = vect6Make(   37,   -28,    56,  -362,  -473,     0);
    
    mapper_matrices.matrices[6].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[6].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[6].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[6].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[6].t5 = vect6Make(  -37,     0,   456,     0,   473,     0);
    mapper_matrices.matrices[6].t6 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[6].t7 = vect6Make(   37,    28,    56,   362,  -473,     0);
    mapper_matrices.matrices[6].t8 = vect6Make(    0,   -28,   512,  -362,     0,     0);
    
    mapper_matrices.matrices[7].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[7].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[7].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[7].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[7].t5 = vect6Make(    0,    28,   512,   362,     0,     0);
    mapper_matrices.matrices[7].t6 = vect6Make(  -37,   -28,   -56,  -362,   473,     0);
    mapper_matrices.matrices[7].t7 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[7].t8 = vect6Make(   37,     0,   568,     0,  -473,     0);
    
    mapper_matrices.matrices[8].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[8].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[8].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[8].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[8].t5 = vect6Make(  -37,    28,   -56,   362,   473,     0);
    mapper_matrices.matrices[8].t6 = vect6Make(    0,   -28,   512,  -362,     0,     0);
    mapper_matrices.matrices[8].t7 = vect6Make(   37,     0,   568,     0,  -473,     0);
    mapper_matrices.matrices[8].t8 = vect6Make(    0,     0,     0,     0,     0,     0);
   


    mapper_matrices.matrices[9].t1 = vect6Make(	   0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t2 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t3 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t4 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t5 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t6 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t7 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[9].t8 = vect6Make(    0,     0,     0,     0,     0,     0);



    mapper_matrices.matrices[10].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[10].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[10].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[10].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[10].t5 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[10].t6 = vect6Make(  -14,   -18,   491,  -228,   175,     0);
    mapper_matrices.matrices[10].t7 = vect6Make(   14,    18,   533,   228,  -174,     0);
    mapper_matrices.matrices[10].t8 = vect6Make(    0,     0,     0,     0,     0,     0);

    mapper_matrices.matrices[11].t1 = vect6Make(  272,   732,     0,     0,     0,  -131);
    mapper_matrices.matrices[11].t2 = vect6Make(  272,  -732,     0,     0,     0,   131);
    mapper_matrices.matrices[11].t3 = vect6Make( -272,   765,     0,     0,     0,   131);
    mapper_matrices.matrices[11].t4 = vect6Make( -272,  -765,     0,     0,     0,  -131);
    mapper_matrices.matrices[11].t5 = vect6Make(  -14,    18,   491,   228,   175,     0);
    mapper_matrices.matrices[11].t6 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[11].t7 = vect6Make(    0,     0,     0,     0,     0,     0);
    mapper_matrices.matrices[11].t8 = vect6Make(   14,   -18,   533,  -228,  -174,     0);




	/*
	 *	Other inits here
	 */
	// Desired force vector should start ROV stationary.
	desired_force_vector.L.x = 0;
	desired_force_vector.L.y = 0;
	desired_force_vector.L.z = 0;
	desired_force_vector.R.x = 0;
	desired_force_vector.R.y = 0;
	desired_force_vector.R.z = 0;
	// Init Pivot position at the center of mass.
	pivotPosition.x = 0;
	pivotPosition.y = 0;
	pivotPosition.z = 0;

}

/*
 *	Zeroes the desired_force_vector and updates thrust map simultaneously.
 */
void ThrustMapper::calcZeroForceVector(void)
{
	desired_force_vector.L.x = 0;
	desired_force_vector.L.y = 0;
	desired_force_vector.L.z = 0;
	desired_force_vector.R.x = 0;
	desired_force_vector.R.y = 0;
	desired_force_vector.R.z = 0;
	calculateThrustMap();
}

/*
 *	Makes the provided loc vector, the pivot position during thrust mapping calculations.
 */
void ThrustMapper::adjustPivotPosition(vect3 loc)
{
	pivotPosition = loc;
}

/*
 *	Uses last set desired_force_vector to calculate and set the thrust_map.
 */
void ThrustMapper::calculateThrustMap(void)
{
	// Calculations:
	vect3 cross_result = cross(pivotPosition, desired_force_vector.R);
	desired_force_vector.L.x += cross_result.x;
	desired_force_vector.L.y += cross_result.y;
	desired_force_vector.L.z += cross_result.z;
	thrust_map = matMul_86x61(mapper_matrices.matrices[mapper_matrices.currentMapperMatrix], desired_force_vector);
}
/*
 *	Uses new target_vector as the desired_force_vector to calculate the thrust map.
 */
void ThrustMapper::calculateThrustMap(vect6 target_vector)
{
	desired_force_vector = div6(target_vector,1024);

	// Calculations:
	vect3 cross_result = cross(pivotPosition, desired_force_vector.R);
	desired_force_vector.L.x += cross_result.x;
	desired_force_vector.L.y += cross_result.y;
	desired_force_vector.L.z += cross_result.z;
	thrust_map = matMul_86x61(mapper_matrices.matrices[mapper_matrices.currentMapperMatrix], desired_force_vector);
}

/*
 *	Changes the mapper_matrix used depending on what thrusters are contributing to the movement of the ROV.
 *	Only accepts a byte. Each bit corresponds to whether each of the 8 thrusters are enabled.
 *	Most significant bit is thruster1, least significant bit is thruster8.
 *
 *	Ex:
 *	all motors on:
 *	enabled_thrusters = [1111][1111] = 255
 *	all but motor 3 on:
 *	enabled_thrusters = [1101][1111] = 223
 *
 */
void ThrustMapper::changeMapperMatrix(uint8_t enabled_thrusters)
{
	switch(enabled_thrusters)
	{
		case 255:
			mapper_matrices.currentMapperMatrix = ALL;
			break;
		case 254:
			mapper_matrices.currentMapperMatrix = T8;
			break;	
		case 253:
			mapper_matrices.currentMapperMatrix = T7;
			break;
		case 251:
			mapper_matrices.currentMapperMatrix = T6;
			break;
		case 247:
			mapper_matrices.currentMapperMatrix = T5;
			break;
		case 239:
			mapper_matrices.currentMapperMatrix = T4;
			break;
		case 223:
			mapper_matrices.currentMapperMatrix = T3;
			break;
		case 191:
			mapper_matrices.currentMapperMatrix = T2;
			break;
		case 127:
			mapper_matrices.currentMapperMatrix = T1;
			break;
    case 249:
      mapper_matrices.currentMapperMatrix = T67;
      break;
    case 246:
      mapper_matrices.currentMapperMatrix = T58;
      break;
    case 0:
      mapper_matrices.currentMapperMatrix = NONE;
      break;
		default:
			mapper_matrices.currentMapperMatrix = NONE;
 	}
}

// GETTERS:
vect6 ThrustMapper::getCurrentForceVector(void)
{
	return desired_force_vector;
}

vect8 ThrustMapper::getThrustMap(void)
{
	return thrust_map;
}

vect3 ThrustMapper::getPivotPosition(void)
{
	return pivotPosition;
}

ThrustMapperMatrices ThrustMapper::getThrustMapperMatrices(void)
{
  return mapper_matrices;
}

